import subprocess
from sys import argv
import os

def generate_pdf(file_name):
	"""
	Input: A file_name with no file type suffix
	Output: A PDF which is opened in a new window
	"""
	if os.path.isfile('./ly_files/{0}.ly'.format(file_name)):
		subprocess.run("lilypond --pdf ./ly_files/{0}.ly".format(file_name))
		os.startfile("{0}.pdf".format(file_name))
	else:
		print('Please make sure that you inputted a valid .ly file name, and moved it into the ./ly_files/ directory.')
		raise FileNotFoundError('Program was unable to find file {0}.ly in the ./ly_files/ directory.'.format(file_name))

def write_ly_file(file_name, note_list, song_name=None, generate_explicit_staff=True):
	"""
	Input: This method takes in a file_name, a list of notes (as strings), and optionally takes a song name.
	Output: It writes a file, called {file_name}.ly without brackets, and uses the song name to properly
	add title/header information to the pdf that would be outputted by running the .ly file
	through lilypond. It then uses explicit pitch representation in lilypond to properly write the tablature.

	TO-DO: Implement an algorithm to determine the fingering of tablature, and 
	"""
	if song_name == None:
		song_name = file_name

	# Begin writing .ly file with the lilypond version and title information
	f = open('./ly_files/{0}.ly'.format(file_name), "w+", encoding="utf-8")
	f.write('\\version \"2.16.0\" % necessary for upgrading to future LilyPond versions.\n\n')
	header_str = '\\header{\n'
	title_str = '\ttitle = \"Tablature for the song {0}\"\n'.format(song_name)
	subtitle_str = '\tsubtitle = \". . . as generated by GuiTabs\"\n'
	f.write(header_str + title_str + subtitle_str + '}\n\n\n\n')

	# Note that for the notes, we have that a, b, c, d, e, f, g are the notes below C4 (middle c)
	# Use , to decrease by an octave, ' to increase by an octave
	# Sharps are represented by adding "is" to the name, while flats use "es"
	# As a general assumption, we're guessing that we shouldn't have weird notes like C11 (e.g. ridiculously high notes)
	# Note that from our pitch tracker, we only have sharp notes and regular notes. Therefore we will never use "es"
	note_wrapper_tab = '\\new TabStaff {\n'

	if generate_explicit_staff:
		note_wrapper_explicit = '\\new Staff {\n'

	end_wrapper = '\n}\n\n'
	note_lines = '\t'
	for note in note_list:
		note = note.lower()
		pitch_class = note[0]
		is_sharp = ''
		octave_number = None
		if len(note) == 3:
			# Has a sharp
			is_sharp = 'is'
			octave_number = int(note[2])
		elif len(note) == 2:
			octave_number = int(note[1])
		else:
			# We have an issue, note is not of the form that we allow
			raise InvalidNoteError('We have encountered an invalid note: {0}'.format(note))

		# Check length of the note lines just to make sure it's readable if you want to look
		# directly at the .ly file

		explicit_pitch_note = pitch_class + is_sharp
		if octave_number < 3:
			# Add one or two , based on octave number
			octave_diff = 3-octave_number
			for i in range(octave_diff):
				explicit_pitch_note = explicit_pitch_note + ','
		elif octave_number > 3:
			octave_diff = octave_number-3
			for i in range(octave_diff):
				explicit_pitch_note = explicit_pitch_note + '\''

		note_lines = note_lines + explicit_pitch_note +' '
		if len(note_lines) >= 12:
			note_wrapper_tab = note_wrapper_tab + note_lines + '\n'
			if generate_explicit_staff:
				note_wrapper_explicit = note_wrapper_explicit + note_lines + '\n'

			note_lines = '\t'

	if generate_explicit_staff:
		f.write(note_wrapper_explicit + note_lines + end_wrapper)

	f.write(note_wrapper_tab + note_lines + end_wrapper)



if __name__ == "__main__":
	example_notes = ['C4', 'E5', 'E4', 'D4', 'D#4', 'E4']
	write_ly_file('Example1', example_notes)
	generate_pdf('Example1')
